document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded. Initializing application features. Implementing Quick Single Image Tagging.');

    // Cache DOM elements
    const photoWall = document.getElementById('photo-wall');
    const prevPageBtn = document.getElementById('prev-page');
    const nextPageBtn = document.getElementById('next-page');
    const pageInfoSpan = document.getElementById('page-info');
    const orgPathsList = document.getElementById('org-paths-list');
    const globalTagsListUl = document.getElementById('global-tags-list');
    const sizeInput = document.getElementById('size-input');
    const sortBySelect = document.getElementById('sort-by');
    const sortOrderSelect = document.getElementById('sort-order');
    const refreshBtn = document.getElementById('refresh-btn');
    const filterConfigBtn = document.getElementById('filter-config-btn');
    const filterConfigModal = document.getElementById('filter-config-modal');
    const filterFunctionInput = document.getElementById('filter-function-input');
    const applyFilterBtn = document.getElementById('apply-filter-btn');
    const clearFilterBtn = document.getElementById('clear-filter-btn');
    const filterStatusDiv = document.getElementById('filter-status');
    const tagManagementBtn = document.getElementById('tag-management-btn');
    const tagManagementModal = document.getElementById('tag-management-modal');
    const newTagInput = document.getElementById('new-tag-input');
    const addNewTagBtn = document.getElementById('add-new-tag-btn');
    const manageTagsListUl = document.getElementById('manage-tags-list');
    const tagManagementStatusDiv = document.getElementById('tag-management-status');
    const imageViewerModal = document.getElementById('image-viewer-modal');
    const fullImage = document.getElementById('full-image');
    const modalCaption = document.querySelector('.modal-caption');
    const modalPrev = document.querySelector('.modal-prev');
    const modalNext = document.querySelector('.modal-next');
    // Batch Tag button (will be used later)
    // const batchTagBtn = document.getElementById('batch-tag-btn');
    // const undoBtn = document.getElementById('undo-btn');


    // Application State
    let currentPage = 1, totalPages = 1;
    let photosPerRow = parseInt(sizeInput.value) || 5;
    if (photoWall) photoWall.style.setProperty('--photos-per-row', photosPerRow); // Check photoWall existence
    let currentSortBy = sortBySelect.value, currentSortOrder = sortOrderSelect.value;
    const selectedMediaIds = new Set();
    const activeTagNamesForOperations = new Set();
    let currentMediaItems = [], isXKeyPressed = false, resizeTimeout, lastCalculatedPerPage = 0;
    let lastTaggingAction = null; // For Undo { type: 'add'/'remove', mediaIds: [], tagNames: [] }

    document.addEventListener('keydown', (event) => { if (event.key === 'x' || event.key === 'X') isXKeyPressed = true; });
    document.addEventListener('keyup', (event) => { if (event.key === 'x' || event.key === 'X') isXKeyPressed = false; });

    function getCalculatedPerPage() { console.log('[getCalculatedPerPage] Starting calculation...');const currentPhotosPerRowVal=parseInt(photoWall.style.getPropertyValue('--photos-per-row'))||photosPerRow;const wallWidth=photoWall.clientWidth;const availableHeight=photoWall.parentElement?photoWall.parentElement.clientHeight:window.innerHeight;const gap=10;console.log(`[getCalculatedPerPage] currentPhotosPerRowVal: ${currentPhotosPerRowVal}`);console.log(`[getCalculatedPerPage] wallWidth: ${wallWidth}, availableHeight (content-area): ${availableHeight}, gap: ${gap}`);if(wallWidth===0||availableHeight===0||currentPhotosPerRowVal===0){console.warn('[getCalculatedPerPage] Wall dimensions, availableHeight or photosPerRow is zero. Defaulting perPage.');return currentPhotosPerRowVal>0?currentPhotosPerRowVal*4:20}const columnWidth=(wallWidth-(currentPhotosPerRowVal-1)*gap)/currentPhotosPerRowVal;console.log(`[getCalculatedPerPage] columnWidth: ${columnWidth.toFixed(2)}`);const thumbHeight=columnWidth;console.log(`[getCalculatedPerPage] thumbHeight (equal to columnWidth): ${thumbHeight.toFixed(2)}`);const singleRowTotalHeight=thumbHeight+gap;console.log(`[getCalculatedPerPage] singleRowTotalHeight (thumbHeight + gap): ${singleRowTotalHeight.toFixed(2)}`);if(singleRowTotalHeight<=gap){console.warn('[getCalculatedPerPage] singleRowTotalHeight is too small (<= gap). Defaulting numRows to 1, perPage to photosPerRow.');return currentPhotosPerRowVal}const numRows=Math.max(1,Math.floor(availableHeight/singleRowTotalHeight));console.log(`[getCalculatedPerPage] Calculated numRows: ${numRows} (based on availableHeight ${availableHeight} / singleRowTotalHeight ${singleRowTotalHeight.toFixed(2)})`);const calculatedPerPage=currentPhotosPerRowVal*numRows;console.log(`[getCalculatedPerPage] Initial calculatedPerPage (photosPerRow * numRows): ${calculatedPerPage}`);const finalPerPage=Math.max(currentPhotosPerRowVal,calculatedPerPage);console.log(`[getCalculatedPerPage] Final perPage to return: ${finalPerPage}`);return finalPerPage }
    async function fetchMedia(page = 1, sortBy = currentSortBy, sortOrder = currentSortOrder) { if(photoWall)void photoWall.offsetHeight;const calculatedPerPage=getCalculatedPerPage();lastCalculatedPerPage=calculatedPerPage;const apiUrl=`/api/media?page=${page}&per_page=${calculatedPerPage}&sort_by=${sortBy}&sort_order=${sortOrder}`;console.log(`Fetching media from: ${apiUrl}`);try{const response=await fetch(apiUrl);if(!response.ok)throw new Error(`HTTP error! status: ${response.status}, message: ${await response.text()}`);const data=await response.json();console.log('Received media data:',{currentPage:data.current_page,totalPages:data.total_pages,totalItems:data.total_items,itemsInPage:data.media.length});currentMediaItems=data.media;renderPhotoWall(currentMediaItems);currentPage=data.current_page;totalPages=data.total_pages;updatePaginationControls()}catch(error){console.error('Error fetching media:',error);photoWall.innerHTML=`<p>Error loading media: ${error.message}. Please try again.</p>`} }

    function renderPhotoWall(mediaItems) {
        console.log(`Rendering photo wall with ${mediaItems ? mediaItems.length : 0} items.`);
        if (!photoWall) { console.error("photoWall element not found during render."); return; }
        photoWall.innerHTML = '';
        if (!mediaItems || mediaItems.length === 0) {
            photoWall.innerHTML = '<p>No media found matching your criteria.</p>';
            return;
        }
        console.log(`Photo wall using CSS Grid with '--photos-per-row': ${photoWall.style.getPropertyValue('--photos-per-row')}`);
        mediaItems.forEach(item => {
            const thumbItem = document.createElement('div');
            thumbItem.classList.add('thumbnail-item');
            thumbItem.dataset.id = item.id; // Ensure item.id is a number or string that can be set as dataset
            thumbItem.style.backgroundImage = `url(/api/media/thumbnail/${item.id})`;
            if (selectedMediaIds.has(item.id)) thumbItem.classList.add('selected');

            thumbItem.addEventListener('click', (event) => {
                if (isXKeyPressed) { event.preventDefault(); openImageViewer(item.id); }
                else { toggleSelection(thumbItem, item.id); }
            });

            // Right-click (contextmenu) listener for quick tagging
            thumbItem.addEventListener('contextmenu', async (event) => {
                event.preventDefault(); // Prevent default browser context menu
                const mediaId = parseInt(item.id); // item.id should be valid
                const activeTags = Array.from(activeTagNamesForOperations);
                console.log(`[QuickTag] Right-click on media ID: ${mediaId}. Active tags to apply:`, activeTags);

                if (activeTags.length === 0) {
                    console.warn('[QuickTag] No active tags selected for tagging.');
                    // Optionally, provide transient feedback to user (e.g. small message near cursor)
                    // For now, just console log and return.
                    return;
                }

                try {
                    const response = await fetch(`/api/media/${mediaId}/tags`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ tag_names: activeTags })
                    });
                    const result = await response.json();
                    if (response.ok) {
                        console.log(`[QuickTag] Successfully tagged media ID ${mediaId} with:`, activeTags, "API response, new tags:", result.tags);
                        // Update client-side data for this media item
                        const updatedItemIndex = currentMediaItems.findIndex(m => m.id === mediaId);
                        if (updatedItemIndex > -1) {
                            currentMediaItems[updatedItemIndex].tags = result.tags; // Update with tags from server response
                        }
                        // Store for undo
                        lastTaggingAction = { type: 'add_quick', mediaIds: [mediaId], tagNames: [...activeTags], previousTags: item.tags /* Store previous tags for precise undo */ };
                        console.log('[Undo] Stored last action for quick tag:', lastTaggingAction);

                        // Visual feedback: temporary highlight or checkmark
                        thumbItem.style.outlineOffset = '-2px'; // Ensure outline is visible inside border
                        thumbItem.style.outline = '3px solid limegreen';
                        setTimeout(() => { thumbItem.style.outline = ''; thumbItem.style.outlineOffset = ''; }, 1200);
                    } else {
                        console.error('[QuickTag] Error tagging media:', result.error);
                        alert(`Error tagging media: ${result.error || 'Unknown server error'}`);
                    }
                } catch (error) {
                    console.error('[QuickTag] Network or other error during quick tagging:', error);
                    alert('Failed to apply tags due to a network or server issue.');
                }
            });

            photoWall.appendChild(thumbItem);
        });
    }

    function toggleSelection(thumbElement, mediaId) { if(selectedMediaIds.has(mediaId)){selectedMediaIds.delete(mediaId);thumbElement.classList.remove('selected')}else{selectedMediaIds.add(mediaId);thumbElement.classList.add('selected')}console.log('Current selection IDs:',Array.from(selectedMediaIds)) }
    function updatePaginationControls() { pageInfoSpan.textContent=`Page ${currentPage} of ${totalPages}`;prevPageBtn.disabled=currentPage<=1;nextPageBtn.disabled=currentPage>=totalPages }
    async function fetchOrgPaths() { try{const r=await fetch('/api/org_paths');const d=await r.json();orgPathsList.innerHTML='';d.forEach(p=>{const l=document.createElement('li');l.textContent=p;orgPathsList.appendChild(l)})}catch(e){console.error('Error fetching org paths:',e)} }

    async function fetchGlobalTags() {
        if (!globalTagsListUl) return;
        try {
            const response = await fetch('/api/tags');
            const tags = await response.json();
            globalTagsListUl.innerHTML = '';
            tags.forEach(tag => {
                const li = document.createElement('li');
                li.textContent = tag.name;
                li.dataset.tagId = tag.id;
                li.dataset.tagName = tag.name;
                if (activeTagNamesForOperations.has(tag.name)) li.classList.add('active-for-tagging');
                li.addEventListener('click', () => {
                    if (activeTagNamesForOperations.has(tag.name)) {
                        activeTagNamesForOperations.delete(tag.name);
                        li.classList.remove('active-for-tagging');
                    } else {
                        activeTagNamesForOperations.add(tag.name);
                        li.classList.add('active-for-tagging');
                    }
                    console.log('[InfoPanel] Active tags for operations:', Array.from(activeTagNamesForOperations));
                });
                globalTagsListUl.appendChild(li);
            });
        } catch (error) { console.error('Error fetching global tags for info panel:', error); globalTagsListUl.innerHTML = '<li>Error loading tags.</li>'; }
    }

    async function handleDeleteTag(tagId, tagName) { if(!confirm(`Are you sure you want to delete the tag '${tagName}'? This will remove it from all photos.`))return;tagManagementStatusDiv.textContent='Deleting tag...';tagManagementStatusDiv.style.color='orange';try{const response=await fetch(`/api/tags/${tagId}`,{method:'DELETE'});const result=await response.json();if(response.ok){tagManagementStatusDiv.textContent=result.message||`Tag '${tagName}' deleted.`;tagManagementStatusDiv.style.color='green';populateManageTagsList();fetchGlobalTags();window.appContext.refreshPhotoWall()}else{tagManagementStatusDiv.textContent=`Error: ${result.error||'Could not delete tag.'}`;tagManagementStatusDiv.style.color='red'}}catch(error){console.error('[TagManagement] Error deleting tag:',error);tagManagementStatusDiv.textContent='Network error deleting tag.';tagManagementStatusDiv.style.color='red'} }
    async function populateManageTagsList() { if(!manageTagsListUl)return;tagManagementStatusDiv.textContent='Loading tags...';tagManagementStatusDiv.style.color='gray';try{const response=await fetch('/api/tags');if(!response.ok)throw new Error(`HTTP error! Status: ${response.status}`);const tags=await response.json();manageTagsListUl.innerHTML='';if(tags.length===0)manageTagsListUl.innerHTML='<li>No tags defined yet.</li>';tags.forEach(tag=>{const li=document.createElement('li');const nameSpan=document.createElement('span');nameSpan.textContent=tag.name;li.appendChild(nameSpan);li.dataset.tagId=tag.id;const delBtn=document.createElement('button');delBtn.textContent='Delete';delBtn.style.marginLeft='10px';delBtn.style.padding='2px 5px';delBtn.style.fontSize='0.8em';delBtn.style.backgroundColor='#dc3545';delBtn.style.color='white';delBtn.style.border='none';delBtn.style.cursor='pointer';delBtn.onclick=(e)=>{e.stopPropagation();handleDeleteTag(tag.id,tag.name)};li.appendChild(delBtn);manageTagsListUl.appendChild(li)});if(tagManagementStatusDiv.textContent==='Loading tags...'){tagManagementStatusDiv.textContent=''}console.log('[TagManagement] Manage tags list populated.')}catch(error){console.error('Error populating manage tags list:',error);manageTagsListUl.innerHTML='<li>Error loading tags.</li>';tagManagementStatusDiv.textContent='Error loading tags.';tagManagementStatusDiv.style.color='red'} }
    if(addNewTagBtn){addNewTagBtn.addEventListener('click', async () => { const tagName=newTagInput.value.trim();tagManagementStatusDiv.textContent='';if(!tagName){tagManagementStatusDiv.textContent='Tag name cannot be empty.';tagManagementStatusDiv.style.color='red';return}tagManagementStatusDiv.textContent='Adding tag...';tagManagementStatusDiv.style.color='orange';try{const response=await fetch('/api/tags',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:tagName})});const result=await response.json();if(response.ok){tagManagementStatusDiv.textContent=`Tag '${result.name}' added.`;tagManagementStatusDiv.style.color='green';newTagInput.value='';populateManageTagsList();fetchGlobalTags()}else{tagManagementStatusDiv.textContent=`Error: ${result.error||'Could not add tag.'}`;tagManagementStatusDiv.style.color='red'}}catch(error){console.error('[TagManagement] Error adding tag:',error);tagManagementStatusDiv.textContent='Network error adding tag.';tagManagementStatusDiv.style.color='red'} });}

    sizeInput.addEventListener('change', () => { const newSize=parseInt(sizeInput.value);if(newSize>0){photosPerRow=newSize;photoWall.style.setProperty('--photos-per-row',photosPerRow);clearSelectionsAndUndoHistory();fetchMedia(1)}else{sizeInput.value=photosPerRow} });
    sortBySelect.addEventListener('change', () => { currentSortBy=sortBySelect.value;clearSelectionsAndUndoHistory();fetchMedia(1) });
    sortOrderSelect.addEventListener('change', () => { currentSortOrder=sortOrderSelect.value;clearSelectionsAndUndoHistory();fetchMedia(1) });
    refreshBtn.addEventListener('click', async () => {const o=refreshBtn.textContent;refreshBtn.textContent='Scanning...';refreshBtn.disabled=true;let s=false;try{const r=await fetch('/api/scan/trigger',{method:'POST'});const t=await r.json().catch(()=>({error:"JSON Error"}));if(!r.ok){alert(`Scan Error: ${t.error||'Unknown'}`);s=true}else{alert('Scan complete.')}}catch(e){alert('Scan Network Error.');s=true}refreshBtn.textContent=o;refreshBtn.disabled=false;if(!s){clearSelectionsAndUndoHistory();fetchMedia(1);fetchOrgPaths();fetchGlobalTags();if(tagManagementModal.style.display==='block')populateManageTagsList()}});
    prevPageBtn.addEventListener('click', () => { if(currentPage>1){clearSelectionsAndUndoHistory();fetchMedia(currentPage-1)} });
    nextPageBtn.addEventListener('click', () => { if(currentPage<totalPages){clearSelectionsAndUndoHistory();fetchMedia(currentPage+1)} });

    function clearSelectionsAndUndoHistory() {
        selectedMediaIds.clear();
        activeTagNamesForOperations.clear();
        lastTaggingAction = null; // Clear last tagging action
        fetchGlobalTags();
        console.log("FRONTEND: Selections, active tags, and undo history cleared.");
        if(document.readyState==='complete'||document.readyState==='interactive')renderPhotoWall(currentMediaItems);
    }

    const allModals=document.querySelectorAll('.modal');const closeButtons=document.querySelectorAll('.close-modal-btn');function openModal(modalId){const modal=document.getElementById(modalId);if(modal)modal.style.display='block'}function closeModal(modalElement){if(modalElement)modalElement.style.display='none'}closeButtons.forEach(b=>{b.onclick=function(){closeModal(b.closest('.modal'))}});window.onclick=function(event){allModals.forEach(m=>{if(event.target==m)closeModal(m)})};let currentViewIndex=-1;function openImageViewer(mediaId){const i=currentMediaItems.findIndex(m=>m.id===mediaId);if(i===-1)return;currentViewIndex=i;updateImageViewerContent();openModal('image-viewer-modal')}function updateImageViewerContent(){if(currentViewIndex<0||currentViewIndex>=currentMediaItems.length)return;const item=currentMediaItems[currentViewIndex];fullImage.src=`/api/media/file/${item.id}`;modalCaption.textContent=item.filename;modalPrev.style.display=currentViewIndex>0?'block':'none';modalNext.style.display=currentViewIndex<currentMediaItems.length-1?'block':'none'}modalPrev.onclick=()=>{if(currentViewIndex>0){currentViewIndex--;updateImageViewerContent()}};modalNext.onclick=()=>{if(currentViewIndex<currentMediaItems.length-1){currentViewIndex++;updateImageViewerContent()}};document.addEventListener('keydown',(event)=>{if(imageViewerModal.style.display==='block'){if(event.key==='ArrowLeft')modalPrev.click();else if(event.key==='ArrowRight')modalNext.click();else if(event.key==='Escape')closeModal(imageViewerModal)}});filterConfigBtn.onclick=()=>{filterStatusDiv.textContent='';openModal('filter-config-modal')};applyFilterBtn.addEventListener('click',async()=>{const fc=filterFunctionInput.value;try{const r=await fetch('/api/media/filter_config',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({filter_code:fc})});const rs=await r.json();if(r.ok){filterStatusDiv.textContent='Filter applied!';filterStatusDiv.style.color='green';closeModal(filterConfigModal);clearSelectionsAndUndoHistory();fetchMedia(1)}else{filterStatusDiv.textContent=`Error: ${rs.error||'Filter error'}`;filterStatusDiv.style.color='red'}}catch(e){filterStatusDiv.textContent='Network error.';filterStatusDiv.style.color='red'}});clearFilterBtn.addEventListener('click',async()=>{try{const r=await fetch('/api/media/filter_config',{method:'DELETE'});const rs=await r.json();if(r.ok){filterFunctionInput.value='';filterStatusDiv.textContent='Filter cleared!';filterStatusDiv.style.color='green';clearSelectionsAndUndoHistory();fetchMedia(1)}else{filterStatusDiv.textContent=`Error: ${rs.error||'Filter clear error'}`;filterStatusDiv.style.color='red'}}catch(e){filterStatusDiv.textContent='Network error.';filterStatusDiv.style.color='red'}});
    if(tagManagementBtn){tagManagementBtn.onclick=()=>{tagManagementStatusDiv.textContent='';openModal('tag-management-modal');populateManageTagsList()};}

    fetchMedia(currentPage, currentSortBy, currentSortOrder);
    fetchOrgPaths();
    fetchGlobalTags();

    window.appContext = {
        refreshPhotoWall: () => fetchMedia(currentPage, currentSortBy, currentSortOrder),
        clearSelections: clearSelectionsAndUndoHistory,
        getActiveTagNames: () => Array.from(activeTagNamesForOperations),
        getSelectedMediaIds: () => Array.from(selectedMediaIds),
        getLastTaggingAction: () => lastTaggingAction, // Getter for last action
        setLastTaggingAction: (action) => { lastTaggingAction = action; } // Setter/clearer for last action
    };
});
