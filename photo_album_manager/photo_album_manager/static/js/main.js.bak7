document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded. Initializing application features. Debug prints enabled.');

    const photoWall = document.getElementById('photo-wall');
    const prevPageBtn = document.getElementById('prev-page');
    const nextPageBtn = document.getElementById('next-page');
    const pageInfoSpan = document.getElementById('page-info');
    const orgPathsList = document.getElementById('org-paths-list');
    const globalTagsList = document.getElementById('global-tags-list');

    const sizeInput = document.getElementById('size-input');
    const sortBySelect = document.getElementById('sort-by');
    const sortOrderSelect = document.getElementById('sort-order');
    const refreshBtn = document.getElementById('refresh-btn');

    const filterConfigBtn = document.getElementById('filter-config-btn');
    const filterConfigModal = document.getElementById('filter-config-modal');
    const filterFunctionInput = document.getElementById('filter-function-input');
    const applyFilterBtn = document.getElementById('apply-filter-btn');
    const clearFilterBtn = document.getElementById('clear-filter-btn');
    const filterStatusDiv = document.getElementById('filter-status');

    const imageViewerModal = document.getElementById('image-viewer-modal');
    const fullImage = document.getElementById('full-image');
    const modalCaption = document.querySelector('.modal-caption');
    const modalPrev = document.querySelector('.modal-prev');
    const modalNext = document.querySelector('.modal-next');

    let currentPage = 1;
    let totalPages = 1;
    let photosPerRow = parseInt(sizeInput.value) || 5;
    let currentSortBy = sortBySelect.value;
    let currentSortOrder = sortOrderSelect.value;
    const selectedMediaIds = new Set();
    let currentMediaItems = [];
    let isXKeyPressed = false;

    document.addEventListener('keydown', (event) => { if (event.key === 'x' || event.key === 'X') isXKeyPressed = true; });
    document.addEventListener('keyup', (event) => { if (event.key === 'x' || event.key === 'X') isXKeyPressed = false; });

    async function fetchMedia(page = 1, sortBy = currentSortBy, sortOrder = currentSortOrder) {
        const calculatedPerPage = photosPerRow * 4; // Fetch enough for a few rows
        const apiUrl = `/api/media?page=${page}&per_page=${calculatedPerPage}&sort_by=${sortBy}&sort_order=${sortOrder}`;
        console.log(`Fetching media from: ${apiUrl}`);
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}, message: ${await response.text()}`);
            const data = await response.json();
            console.log('Received media data:', { currentPage: data.current_page, totalPages: data.total_pages, totalItems: data.total_items, itemsInPage: data.media.length });
            currentMediaItems = data.media;
            renderPhotoWall(currentMediaItems); // Call renderPhotoWall after currentMediaItems is updated
            currentPage = data.current_page;
            totalPages = data.total_pages;
            updatePaginationControls();
        } catch (error) {
            console.error('Error fetching media:', error);
            photoWall.innerHTML = `<p>Error loading media: ${error.message}. Please try again.</p>`;
        }
    }

    function renderPhotoWall(mediaItems) {
        console.log(`Rendering photo wall with ${mediaItems ? mediaItems.length : 0} items. Photos per row: ${photosPerRow}`);
        photoWall.innerHTML = '';
        if (!mediaItems || mediaItems.length === 0) {
            photoWall.innerHTML = '<p>No media found matching your criteria.</p>';
            return;
        }
        const wallWidth = photoWall.clientWidth;
        const gap = 10; // Corresponds to CSS gap: .photo-wall { gap: 10px; }
        const borderTotalWidth = 4; // 2px border on each side for .thumbnail-item (border: 2px solid transparent;)

        // Calculate total width available for all thumbnail *content* areas combined (excluding item borders)
        let totalWidthForAllItemsIncludingTheirBorders = wallWidth - ((photosPerRow - 1) * gap);
        let singleItemTotalWidth = Math.floor(totalWidthForAllItemsIncludingTheirBorders / photosPerRow);

        // The size we set for width/height should be for the content area of the thumbnail,
        // so we subtract the border width from the calculated singleItemTotalWidth.
        let thumbContentSize = singleItemTotalWidth - borderTotalWidth;

        // Ensure minimum size for the content area
        thumbContentSize = Math.max(50, thumbContentSize);

        console.log(`Wall width: ${wallWidth}px, Item total width (incl. its border): ${singleItemTotalWidth}px, Calculated content thumbSize: ${thumbContentSize}px`);

        mediaItems.forEach(item => {
            const thumbItem = document.createElement('div');
            thumbItem.classList.add('thumbnail-item');
            thumbItem.dataset.id = item.id;
            // The CSS will apply border, so style.width/height is for the content box.
            thumbItem.style.width = `${thumbContentSize}px`;
            thumbItem.style.height = `${thumbContentSize}px`;
            thumbItem.style.backgroundImage = `url(/api/media/thumbnail/${item.id})`;
            if (selectedMediaIds.has(item.id)) thumbItem.classList.add('selected');
            thumbItem.addEventListener('click', (event) => {
                if (isXKeyPressed) { event.preventDefault(); openImageViewer(item.id); }
                else { toggleSelection(thumbItem, item.id); }
            });
            photoWall.appendChild(thumbItem);
        });
    }

    function toggleSelection(thumbElement, mediaId) { if(selectedMediaIds.has(mediaId)){selectedMediaIds.delete(mediaId);thumbElement.classList.remove('selected')}else{selectedMediaIds.add(mediaId);thumbElement.classList.add('selected')}console.log('Current selection IDs:',Array.from(selectedMediaIds)) }
    function updatePaginationControls() { pageInfoSpan.textContent=`Page ${currentPage} of ${totalPages}`;prevPageBtn.disabled=currentPage<=1;nextPageBtn.disabled=currentPage>=totalPages }

    async function fetchOrgPaths() {
        try {
            const response = await fetch('/api/org_paths');
            const data = await response.json();
            orgPathsList.innerHTML = '';
            data.forEach(path => {
                const li = document.createElement('li');
                li.textContent = path;
                orgPathsList.appendChild(li);
            });
        } catch(error) {
            console.error('Error fetching org paths:', error);
        }
    }
    async function fetchGlobalTags() {
        try {
            const response = await fetch('/api/tags');
            const data = await response.json();
            globalTagsList.innerHTML = '';
            data.forEach(tag => {
                const li = document.createElement('li');
                li.textContent = tag.name;
                li.dataset.tagId = tag.id;
                globalTagsList.appendChild(li);
            });
        } catch(error) {
            console.error('Error fetching global tags:', error);
        }
    }

    sizeInput.addEventListener('change', () => {
        const newSize = parseInt(sizeInput.value);
        if (newSize > 0) { console.log(`Size changed to ${newSize} photos per row.`); photosPerRow = newSize; clearSelectionsAndUndoHistory(); fetchMedia(1);}
        else { sizeInput.value = photosPerRow; }
    });
    sortBySelect.addEventListener('change', () => { currentSortBy = sortBySelect.value; console.log(`Sort by changed to: ${currentSortBy}`); clearSelectionsAndUndoHistory(); fetchMedia(1); });
    sortOrderSelect.addEventListener('change', () => { currentSortOrder = sortOrderSelect.value; console.log(`Sort order changed to: ${currentSortOrder}`); clearSelectionsAndUndoHistory(); fetchMedia(1); });

    refreshBtn.addEventListener('click', async () => { console.log('Deep Refresh button clicked.');const o=refreshBtn.textContent;refreshBtn.textContent='Scanning Libraries...';refreshBtn.disabled=true;let s=!1;try{const r=await fetch('/api/scan/trigger',{method:'POST'});const t=await r.json().catch(()=>({error:"Failed to parse response JSON."}));if(!r.ok){console.error('Error triggering scan:',t.error||r.statusText,t.details);alert(`Error triggering library scan: ${t.error||r.statusText}`);s=!0}else{console.log('Library scan triggered successfully via API.',t.message);alert(t.message||'Library scan complete. Refreshing view.')}}catch(e){console.error('Network error or other issue triggering scan:',e);alert(`Failed to trigger library scan: ${e.message}. Check network or server console.`);s=!0}refreshBtn.textContent=o;refreshBtn.disabled=!1;if(!s){console.log('Scan successful or non-blocking error occurred, proceeding to refresh view data.');clearSelectionsAndUndoHistory();fetchMedia(1,currentSortBy,currentSortOrder);fetchOrgPaths();fetchGlobalTags()}else{console.log('Scan failed or error occurred, view refresh aborted.')}});

    prevPageBtn.addEventListener('click', () => { if (currentPage > 1) { console.log('Previous page requested.'); clearSelectionsAndUndoHistory(); fetchMedia(currentPage - 1); }});
    nextPageBtn.addEventListener('click', () => { if (currentPage < totalPages) { console.log('Next page requested.'); clearSelectionsAndUndoHistory(); fetchMedia(currentPage + 1); }});

    function clearSelectionsAndUndoHistory() { selectedMediaIds.clear();console.log("FRONTEND: Selections and undo history placeholder cleared.");if(document.readyState==='complete'||document.readyState==='interactive')renderPhotoWall(currentMediaItems); }

    const allModals = document.querySelectorAll('.modal');
    const closeButtons = document.querySelectorAll('.close-modal-btn');
    function openModal(modalId) { const modal = document.getElementById(modalId); if(modal) modal.style.display = 'block'; }
    function closeModal(modalElement) { if(modalElement) modalElement.style.display = 'none'; }
    closeButtons.forEach(button => { button.onclick = function() { closeModal(button.closest('.modal')); }});
    window.onclick = function(event) { allModals.forEach(modal => { if (event.target == modal) closeModal(modal); }); }

    let currentViewIndex = -1;
    function openImageViewer(mediaId) { const itemIndex = currentMediaItems.findIndex(m => m.id === mediaId); if (itemIndex === -1) return; currentViewIndex = itemIndex; updateImageViewerContent(); openModal('image-viewer-modal'); }
    function updateImageViewerContent() { if (currentViewIndex < 0 || currentViewIndex >= currentMediaItems.length) return; const item = currentMediaItems[currentViewIndex]; fullImage.src = `/api/media/file/${item.id}`; modalCaption.textContent = item.filename; modalPrev.style.display = currentViewIndex > 0 ? 'block' : 'none'; modalNext.style.display = currentViewIndex < currentMediaItems.length - 1 ? 'block' : 'none'; }
    modalPrev.onclick = () => { if(currentViewIndex > 0) { currentViewIndex--; updateImageViewerContent(); }};
    modalNext.onclick = () => { if(currentViewIndex < currentMediaItems.length - 1) { currentViewIndex++; updateImageViewerContent(); }};
    document.addEventListener('keydown', (event) => { if (imageViewerModal.style.display === 'block') { if (event.key === 'ArrowLeft') modalPrev.click(); else if (event.key === 'ArrowRight') modalNext.click(); else if (event.key === 'Escape') closeModal(imageViewerModal); }});

    filterConfigBtn.onclick = () => { console.log('Filter config modal opened.'); filterStatusDiv.textContent = ''; filterStatusDiv.style.color = ''; openModal('filter-config-modal'); };
    applyFilterBtn.addEventListener('click', async () => { const filterCode = filterFunctionInput.value; console.log('Applying filter with code:', filterCode.substring(0,100) + '...'); try { const response = await fetch('/api/media/filter_config', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ filter_code: filterCode }) }); const result = await response.json(); if (response.ok) { filterStatusDiv.textContent = 'Filter applied successfully!'; filterStatusDiv.style.color = 'green'; console.log('Filter applied successfully via API.'); closeModal(filterConfigModal); clearSelectionsAndUndoHistory(); fetchMedia(1); } else { filterStatusDiv.textContent = `Error: ${result.error || 'Could not apply filter.'}`; filterStatusDiv.style.color = 'red'; console.error('API error applying filter:', result.error); } } catch (error) { console.error('Network error applying filter:', error); filterStatusDiv.textContent = 'Network error applying filter.'; filterStatusDiv.style.color = 'red'; } });
    clearFilterBtn.addEventListener('click', async () => { console.log('Clearing filter.'); try { const response = await fetch('/api/media/filter_config', { method: 'DELETE' }); const result = await response.json(); if (response.ok) { filterFunctionInput.value = ''; filterStatusDiv.textContent = 'Filter cleared successfully!'; filterStatusDiv.style.color = 'green'; console.log('Filter cleared successfully via API.'); clearSelectionsAndUndoHistory(); fetchMedia(1); } else { filterStatusDiv.textContent = `Error: ${result.error || 'Could not clear filter.'}`; filterStatusDiv.style.color = 'red'; console.error('API error clearing filter:', result.error); } } catch (error) { console.error('Network error clearing filter:', error); filterStatusDiv.textContent = 'Network error clearing filter.'; filterStatusDiv.style.color = 'red'; } });

    document.getElementById('tag-management-btn').onclick = () => openModal('tag-management-modal');

    fetchMedia(currentPage, currentSortBy, currentSortOrder);
    fetchOrgPaths();
    fetchGlobalTags();

    window.appContext = { refreshPhotoWall: () => fetchMedia(currentPage, currentSortBy, currentSortOrder), clearSelections: clearSelectionsAndUndoHistory };
});
